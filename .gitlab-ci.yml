variables: &VARS
  BIGNLP_REGISTRY: "gitlab-master.nvidia.com:5005/dl/joc/bignlp-scripts"
  BIGNLP_BASE_IMAGE: "nvcr.io/nvidian/bignlp-training:22.06.03-py"
  SELENE_BIGNLP_CI_PATH: "/lustre/fsw/joc/big_nlp/bignlp_ci"
  NGC_BIGNLP_CI_PATH: "bignlp_ci" # mount at /mount/results
  CONTAINER_NVCR_BASE: nvcr.io/nvidian/bignlp-ci:training

stages:
  - build
  - test
  - cleanup

################
# JOB Templates
################

test:unit_tests:
  tags:
    - V100
  stage: test
  script:
    - pip install -r requirements.txt
    - pip install pytest
    - pip install requests-mock
    - export PATH="/home/gitlab-runner/.local/bin:$PATH"
    - pytest tests/unit_tests
  rules:
    - when: always

before_script:
  - umask 0007
  - export DOCKERFILE=./Dockerfile
  - export FROM_IMAGE_NAME=$BIGNLP_BASE_IMAGE
  - export IMAGE_NAME=bignlp_ci
  - export BUILD_IMAGE_NAME=${BIGNLP_REGISTRY}/${IMAGE_NAME}:pipe.${CI_PIPELINE_ID}
  - export BUILD_IMAGE_NAME_SRUN="${BUILD_IMAGE_NAME/:5005\//#}"
  - export NVCR_IMAGE_NAME=${CONTAINER_NVCR_BASE}.pipe.${CI_PIPELINE_ID}

.build: &build_template
  stage: build
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN "${CI_REGISTRY}"
    - export DOCKER_REGISTRY="${CI_REGISTRY/:5005/}"
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN "${DOCKER_REGISTRY}"
    - docker login -u "\$oauthtoken" -p $NGC_CLI_API_KEY nvcr.io
    # Define bignlp build image
    - set -x
    - ls
    - env
    - export FROM_IMAGE_ARG="--build-arg FROM_IMAGE_NAME=${FROM_IMAGE_NAME}"
    - docker build -t ${BUILD_IMAGE_NAME} ${FROM_IMAGE_ARG} .
    - docker push ${BUILD_IMAGE_NAME}
    # Push to NGC
    - docker tag ${BUILD_IMAGE_NAME} ${NVCR_IMAGE_NAME}
    - docker push ${NVCR_IMAGE_NAME}

  allow_failure: false
  tags:
    - vm-builder

.LUNA: &LUNA
  variables: &LUNA_VARS
    SLURM_PARTITION: "luna"
    SLURM_NIGHTLY_PARTITION: "luna"
    SLURM_ACCOUNT: "joc"
    CLUSTER:       "selene"
    PYXIS_LITE:    "1"
    ENROOT_MOUNT_HOME: "n"
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$SLURM_ACCOUNT/big_nlp/bignlp_ci/$CI_PIPELINE_ID/$CI_JOB_ID/$CI_PROJECT_NAME # THIS DOES NOT HAVE QUOTES FOR A REASON
    EXCLUDE_NODES: ""
    GPU_ARCH:      "A100"
  tags: &LUNA_TAGS
    - selene_ssh

.NGC: &NGC
  variables: &NGC_VARS
    NGC_CLI_FORMAT_TYPE: "json"
    NGC_CLI_ACE: "nv-eagle"
    NGC_CLI_ORG: "nv-eagle-debug"
    NGC_CLI_TEAM: "no-team"
    NGC_CI_RESULT_WORKSPACE: "yuya-bignlp-ci"
  tags: &NGC_TAGS
    - ngc

.bignlp-NGC-test-LAUNCHER: &bignlp-NGC-test-LAUNCHER
  tags: *NGC_TAGS
  stage: test
  script:
    - set -x
    - pwd
    - export PIPELINE_DIR="${NGC_BIGNLP_CI_PATH}/${CI_PIPELINE_ID}"
    - export NGC_PROJECT_DIR="${PIPELINE_DIR}/${CI_JOB_ID}/${CI_PROJECT_NAME}" # GIT_CLONE_PATH on NGC
    - export BASE_RESULTS_DIR="${PIPELINE_DIR}/results"
    - export RUN_NAME=${RUN_TASK}_${RUN_MODEL}_${RUN_JOB_NAME}
    - export RESULTS_DIR=${BASE_RESULTS_DIR}/${RUN_NAME}
    - env
    - ngc workspace upload --source . --destination ${NGC_PROJECT_DIR} ${NGC_CI_RESULT_WORKSPACE}
    - bash tests/ci_tests/ngc/scripts/${RUN_TASK}/${RUN_MODEL}/${RUN_JOB_NAME}.sh | tee job_${CI_JOB_ID}.json
    - NGC_ID=$(cat job_${CI_JOB_ID}.json | jq -r ".id")
    - cd tests/ci_tests/utils
    - chmod 777 ./* -R
    - bash ngcjobwait.sh ${NGC_ID} 0
    - ngc batch attach ${NGC_ID}
    - bash ngcjobwait.sh ${NGC_ID} 1
    - bash ngcjobcheck.sh ${NGC_ID}
    - echo "Finished pytest job"

build-BigNLP:
  <<: *build_template
  rules:
    - when: always


.bignlp-LUNA-test-LAUNCHER: &bignlp-LUNA-test-LAUNCHER
  tags: *LUNA_TAGS
  stage: test
  script: &bignlp-LUNA-test-LAUNCHER-SCRIPT
    - chmod 774 ./* -R
    - umask 0007
    - source /lustre/fsw/joc/big_nlp/nemo_gpt3/my_venv/bin/activate
    - set -x
    - export PIPELINE_DIR="${SELENE_BIGNLP_CI_PATH}/${CI_PIPELINE_ID}"
    - export BASE_RESULTS_DIR="${PIPELINE_DIR}/results"
    - export RUN_NAME=${RUN_TASK}_${RUN_MODEL}_${RUN_JOB_NAME}
    - export RESULTS_DIR=${BASE_RESULTS_DIR}/${RUN_NAME}
    - env
    - bash tests/ci_tests/selene/scripts/${RUN_TASK}/${RUN_MODEL}/${RUN_JOB_NAME}.sh
    # Wait for job to launch
    - sleep 10s # Without this, "sacct" in jobstate.sh does not always find the SLURM job.
    - export SLURM_JOBID=$(grep 'Submitted batch job' "${RESULTS_DIR}/launcher.log" | awk '{ print $4 }')
    - echo $SLURM_JOBID
    - export SLURM_OUTPUT=${RESULTS_DIR}/slurm_${SLURM_JOBID}.log
    #export SLURM_OUTPUT=$(scontrol show job "${SLURM_JOBID}" | grep 'StdOut' | awk -F '=' '{ print $2 }')
    - cd tests/ci_tests/utils
    - chmod 777 ./* -R
    - bash jobwait.sh "${SLURM_JOBID}" & PID=$!
    - touch "${SLURM_OUTPUT}"
    - \[ ! -z ${SLURM_JOBID} \] && echo -e " --------------------------------------------------\n"
                "----------WAITING FOR SLURM JOB TO BEGIN-----------\n"
                "---------------------------------------------------\n"
                "$(scontrol show job=${SLURM_JOBID})\n"
                "---------------------------------------------------\n"
    # Gitlab logs collapsible section markers
    - echo -e "\e[0Ksection_end:`date +%s`:slurm_setup\r\e[0K"
    # Follow output of the job
    - tail --pid="${PID}" -f "${SLURM_OUTPUT}" # Stream job output until it finishes.
    - echo "Finished job with name ${RUN_NAME}"
    - cd ${GIT_CLONE_PATH}
    # Run metrics collection
    - python3 tests/ci_tests/utils/convert_ci_metric_to_json.py tests/ci_tests/selene/pytest/${RUN_TASK}/${RUN_MODEL}/test_${RUN_JOB_NAME}.py
    # Run Pytest
    - pip3 install pytest
    - pytest tests/ci_tests/selene/pytest/${RUN_TASK}/${RUN_MODEL}/test_${RUN_JOB_NAME}.py
    - echo "Finished pytest job"
  allow_failure: false

train.gpt3.126m_tp1_pp1_1node_100steps:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: train
    RUN_MODEL: gpt3
    RUN_JOB_NAME: 126m_tp1_pp1_1node_100steps
  rules:
    - when: always
  needs:
    - build-BigNLP

train.gpt3.126m_tp2_pp1_1node_100steps:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: train
    RUN_MODEL: gpt3
    RUN_JOB_NAME: 126m_tp2_pp1_1node_100steps
  rules:
    - when: always
  needs:
    - build-BigNLP

train.gpt3.126m_tp1_pp2_2node_100steps:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: train
    RUN_MODEL: gpt3
    RUN_JOB_NAME: 126m_tp1_pp2_2node_100steps
  rules:
    - when: always
  needs:
    - build-BigNLP

train.gpt3.126m_tp2_pp2_2node_100steps:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: train
    RUN_MODEL: gpt3
    RUN_JOB_NAME: 126m_tp2_pp2_2node_100steps
  rules:
    - when: always
  needs:
    - build-BigNLP

train.gpt3.126m_tp4_pp4_4node_100steps:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: train
    RUN_MODEL: gpt3
    RUN_JOB_NAME: 126m_tp4_pp4_4node_100steps
  rules:
    - when: manual
  needs:
    - build-BigNLP

train.gpt3.5b_tp2_pp1_1node_100steps:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: train
    RUN_MODEL: gpt3
    RUN_JOB_NAME: 5b_tp2_pp1_1node_100steps
  rules:
    - when: manual
  needs:
    - build-BigNLP

train.gpt3.5b_tp2_pp2_2node_100steps:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: train
    RUN_MODEL: gpt3
    RUN_JOB_NAME: 5b_tp2_pp2_2node_100steps
  rules:
    - when: manual
  needs:
    - build-BigNLP

train.gpt3.20b_tp8_pp2_4node_100steps:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: train
    RUN_MODEL: gpt3
    RUN_JOB_NAME: 20b_tp8_pp2_4node_100steps
  rules:
    - when: manual
  needs:
    - build-BigNLP

train.gpt3.40b_tp8_pp4_8node_100steps:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: train
    RUN_MODEL: gpt3
    RUN_JOB_NAME: 40b_tp8_pp4_8node_100steps
  rules:
    - when: manual
  needs:
    - build-BigNLP

train.gpt3.175b_tp8_pp16_16node_50steps:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: train
    RUN_MODEL: gpt3
    RUN_JOB_NAME: 175b_tp8_pp16_16node_50steps
  rules:
    - when: manual
  needs:
    - build-BigNLP

train.t5.220m_tp1_pp1_1node_100steps:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: train
    RUN_MODEL: t5
    RUN_JOB_NAME: 220m_tp1_pp1_1node_100steps
  rules:
    - when: always
  needs:
    - build-BigNLP

train.t5.220m_tp2_pp1_1node_100steps:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: train
    RUN_MODEL: t5
    RUN_JOB_NAME: 220m_tp2_pp1_1node_100steps
  rules:
    - when: always
  needs:
    - build-BigNLP

train.t5.220m_tp1_pp2_2node_100steps:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: train
    RUN_MODEL: t5
    RUN_JOB_NAME: 220m_tp1_pp2_2node_100steps
  rules:
    - when: always
  needs:
    - build-BigNLP

train.t5.220m_tp2_pp2_2node_100steps:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: train
    RUN_MODEL: t5
    RUN_JOB_NAME: 220m_tp2_pp2_2node_100steps
  rules:
    - when: always
  needs:
    - build-BigNLP


train.mt5.170m_tp1_pp1_1node_100steps:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: train
    RUN_MODEL: mt5
    RUN_JOB_NAME: 170m_tp1_pp1_1node_100steps
  rules:
    - when: always
  needs:
    - build-BigNLP

train.mt5.170m_tp2_pp1_1node_100steps:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: train
    RUN_MODEL: mt5
    RUN_JOB_NAME: 170m_tp2_pp1_1node_100steps
  rules:
    - when: always
  needs:
    - build-BigNLP

train.mt5.170m_tp1_pp2_2node_100steps:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: train
    RUN_MODEL: mt5
    RUN_JOB_NAME: 170m_tp1_pp2_2node_100steps
  rules:
    - when: always
  needs:
    - build-BigNLP

train.mt5.170m_tp2_pp2_2node_100steps:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: train
    RUN_MODEL: mt5
    RUN_JOB_NAME: 170m_tp2_pp2_2node_100steps
  rules:
    - when: always
  needs:
    - build-BigNLP

eval.gpt3.126m_tp1_pp1_lambada:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: eval
    RUN_MODEL: gpt3
    RUN_JOB_NAME: 126m_tp1_pp1_lambada
  rules:
    - when: always
  needs:
    - train.gpt3.126m_tp1_pp1_1node_100steps


eval.gpt3.126m_tp2_pp1_lambada:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: eval
    RUN_MODEL: gpt3
    RUN_JOB_NAME: 126m_tp2_pp1_lambada
  rules:
    - when: always
  needs:
    - train.gpt3.126m_tp2_pp1_1node_100steps


eval.gpt3.126m_tp1_pp2_lambada:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: eval
    RUN_MODEL: gpt3
    RUN_JOB_NAME: 126m_tp1_pp2_lambada
  rules:
    - when: always
  needs:
    - train.gpt3.126m_tp1_pp2_2node_100steps


eval.gpt3.126m_tp2_pp2_lambada:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: eval
    RUN_MODEL: gpt3
    RUN_JOB_NAME: 126m_tp2_pp2_lambada
  rules:
    - when: always
  needs:
    - train.gpt3.126m_tp2_pp2_2node_100steps


convert.gpt3.126m_tp1_pp1:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: convert
    RUN_MODEL: gpt3
    RUN_JOB_NAME: 126m_tp1_pp1
  rules:
    - when: always
  needs:
    - train.gpt3.126m_tp1_pp1_1node_100steps


convert.gpt3.126m_tp2_pp1:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: convert
    RUN_MODEL: gpt3
    RUN_JOB_NAME: 126m_tp2_pp1
  rules:
    - when: always
  needs:
    - train.gpt3.126m_tp2_pp1_1node_100steps


convert.gpt3.126m_tp1_pp2:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: convert
    RUN_MODEL: gpt3
    RUN_JOB_NAME: 126m_tp1_pp2
  rules:
    - when: always
  needs:
    - train.gpt3.126m_tp1_pp2_2node_100steps


convert.gpt3.126m_tp2_pp2:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: convert
    RUN_MODEL: gpt3
    RUN_JOB_NAME: 126m_tp2_pp2
  rules:
    - when: always
  needs:
    - train.gpt3.126m_tp2_pp2_2node_100steps

convert.t5.220m_tp1_pp1:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: convert
    RUN_MODEL: t5
    RUN_JOB_NAME: 220m_tp1_pp1
  rules:
    - when: always
  needs:
    - train.t5.220m_tp1_pp1_1node_100steps

convert.t5.220m_tp2_pp2:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: convert
    RUN_MODEL: t5
    RUN_JOB_NAME: 220m_tp2_pp2
  rules:
    - when: always
  needs:
    - train.t5.220m_tp2_pp2_2node_100steps

finetune.t5.220m_tp1_pp1_1node_100steps_mnli:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: finetune
    RUN_MODEL: t5
    RUN_JOB_NAME: 220m_tp1_pp1_1node_100steps_mnli
  rules:
    - when: always
  needs:
    - convert.t5.220m_tp1_pp1

finetune.t5.220m_tp2_pp2_2node_100steps_mnli:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: finetune
    RUN_MODEL: t5
    RUN_JOB_NAME: 220m_tp2_pp2_2node_100steps_mnli
  rules:
    - when: always
  needs:
    - convert.t5.220m_tp2_pp2

eval.t5.220m_tp1_pp1:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: eval
    RUN_MODEL: t5
    RUN_JOB_NAME: 220m_tp1_pp1_mnli
  rules:
    - when: always
  needs:
    - finetune.t5.220m_tp1_pp1_1node_100steps_mnli

eval.t5.220m_tp2_pp2:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: eval
    RUN_MODEL: t5
    RUN_JOB_NAME: 220m_tp2_pp2_mnli
  rules:
    - when: always
  needs:
    - finetune.t5.220m_tp2_pp2_2node_100steps_mnli

convert.mt5.170m_tp1_pp1:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: convert
    RUN_MODEL: mt5
    RUN_JOB_NAME: 170m_tp1_pp1
  rules:
    - when: always
  needs:
    - train.mt5.170m_tp1_pp1_1node_100steps

convert.mt5.170m_tp2_pp2:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: convert
    RUN_MODEL: mt5
    RUN_JOB_NAME: 170m_tp2_pp2
  rules:
    - when: always
  needs:
    - train.mt5.170m_tp2_pp2_2node_100steps

finetune.mt5.170m_tp1_pp1_1node_100steps_xnli:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: finetune
    RUN_MODEL: mt5
    RUN_JOB_NAME: 170m_tp1_pp1_1node_100steps_xnli
  rules:
    - when: always
  needs:
    - convert.mt5.170m_tp1_pp1

finetune.mt5.170m_tp2_pp2_2node_100steps_xnli:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: finetune
    RUN_MODEL: mt5
    RUN_JOB_NAME: 170m_tp2_pp2_2node_100steps_xnli
  rules:
    - when: always
  needs:
    - convert.mt5.170m_tp2_pp2

eval.mt5.170m_tp1_pp1:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: eval
    RUN_MODEL: mt5
    RUN_JOB_NAME: 170m_tp1_pp1_xnli
  rules:
    - when: always
  needs:
    - finetune.mt5.170m_tp1_pp1_1node_100steps_xnli

eval.mt5.170m_tp2_pp2:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: eval
    RUN_MODEL: mt5
    RUN_JOB_NAME: 170m_tp2_pp2_xnli
  rules:
    - when: always
  needs:
    - finetune.mt5.170m_tp2_pp2_2node_100steps_xnli

prompt_learn.gpt3.126m_tp1_pp1_1node_100steps_squad:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: prompt_learn
    RUN_MODEL: gpt3
    RUN_JOB_NAME: 126m_tp1_pp1_1node_100steps_squad
  rules:
    - when: always
  needs:
    - convert.gpt3.126m_tp1_pp1

eval.gpt3.prompt_126m_tp1_pp1_squad:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: eval
    RUN_MODEL: gpt3
    RUN_JOB_NAME: prompt_126m_tp1_pp1_squad
  rules:
    - when: always
  needs:
    - prompt_learn.gpt3.126m_tp1_pp1_1node_100steps_squad

data_prep.gpt3.the_pile_prepare_shard00:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: data_prep
    RUN_MODEL: gpt3
    RUN_JOB_NAME: the_pile_prepare_shard00
  rules:
    - when: manual
  needs:
    - build-BigNLP


data_prep.t5.the_pile_prepare_shard00:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: data_prep
    RUN_MODEL: t5
    RUN_JOB_NAME: the_pile_prepare_shard00
  rules:
    - when: manual
  needs:
    - build-BigNLP


data_prep.mt5.mc4_prepare_lang_mt:
  <<: *bignlp-LUNA-test-LAUNCHER
  variables:
    <<: [*VARS, *LUNA_VARS]
    RUN_TASK: data_prep
    RUN_MODEL: mt5
    RUN_JOB_NAME: mc4_prepare_lang_mt
  rules:
    - when: manual
  needs:
    - build-BigNLP

train.gpt3.ngc_126m_tp1_pp1_2node_100steps:
  <<: *bignlp-NGC-test-LAUNCHER
  variables:
    <<: [*VARS, *NGC_VARS]
    RUN_TASK: train
    RUN_MODEL: gpt3
    RUN_JOB_NAME: 126m_tp1_pp1_2node_100steps
  rules:
    - when: always
  needs:
    - build-BigNLP

cleanup.selene:
  tags: *LUNA_TAGS
  stage: cleanup
  variables:
    <<: [*VARS, *LUNA_VARS]
  script:
    - rm -rf ${CI_BUILDS_DIR}/${SLURM_ACCOUNT}/big_nlp/bignlp_ci/*
    - echo "Finished cleaning everything in Selene"
  allow_failure: true
  rules:
    - when: manual
